#BlueJ class context
comment0.target=BinaryTree
comment0.text=\n\ Abstract\ class\ that\ implements\ the\ Tree\ interface\n\n\ @author\ Sena\ Yevenyo\n\ @version\ October\ 21,\ 2019\n
comment1.params=
comment1.target=BinaryTree()
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ BinaryTree\n
comment10.params=node
comment10.target=java.lang.String\ inOrderStringRecursive(BinaryNode)
comment10.text=\n\ Returns\ a\ String\ representation\ using\ the\ in-order\ transversal\ in\ recursive\ form\n\n\ @return\ the\ String\ representation\ of\ the\ in-order\ transversal\ the\ class\ object\ implementing\ Tree\n
comment11.params=
comment11.target=java.lang.String\ postOrderString()
comment11.text=\n\ Returns\ a\ String\ representation\ using\ the\ post-order\ transversal\n\n\ @return\ the\ String\ representation\ of\ the\ post-order\ transversal\ the\ class\ object\ implementing\ Tree\n
comment12.params=node
comment12.target=java.lang.String\ postOrderStringRecursive(BinaryNode)
comment12.text=\n\ Returns\ a\ String\ representation\ using\ the\ post-order\ transversal\ in\ recursive\ form\n\n\ @return\ the\ String\ representation\ of\ the\ post-order\ transversal\ the\ class\ object\ implementing\ Tree\n
comment13.params=
comment13.target=java.lang.String\ preOrderString()
comment13.text=\n\ Returns\ a\ String\ representation\ using\ the\ pre-order\ transversal\n\n\ @return\ the\ String\ representation\ of\ the\ pre-order\ transversal\ the\ class\ object\ implementing\ Tree\n
comment14.params=node
comment14.target=java.lang.String\ preOrderStringRecursive(BinaryNode)
comment2.params=
comment2.target=void\ empty()
comment2.text=\n\ Removes\ all\ the\ objects\ in\ a\ tree\n\n\n
comment3.params=
comment3.target=boolean\ isEmpty()
comment3.text=\n\ Returns\ true\ if\ there\ are\ no\ objects\ in\ the\ object\ class\ implementing\ Tree\n\n\ @return\ boolean\ value\ determining\ if\ a\ tree\ implementing\ class\ object\ is\ empty\ or\ not\n
comment4.params=
comment4.target=int\ getHeight()
comment4.text=\n\ Returns\ height\ of\ the\ tree\n\n\ @return\ height\ of\ the\ tree;\n
comment5.params=i
comment5.target=int\ numOfElementsDepth(int)
comment5.text=\n\ Returns\ the\ number\ of\ objects\ at\ a\ certain\ depth\n\n\ @param\ depth\ number\n\ @return\ number\ of\ objects\ at\ the\ input\ depth\n
comment6.params=node\ i\ treeHeight
comment6.target=int\ numOfElementsDepthRecursive(BinaryNode,\ int,\ int)
comment6.text=\n\ Returns\ the\ number\ of\ objects\ at\ a\ certain\ depth\n\n\ @param\ depth\ number\n\ @return\ number\ of\ objects\ at\ the\ input\ depth\n
comment7.params=
comment7.target=java.lang.Comparable\ findMax()
comment7.text=\n\ Returns\ the\ largest\ object\ in\ the\ class\ implementing\ Tree\n\n\ @return\ the\ largest\ object\ in\ the\ class\ implementing\ Tree\n
comment8.params=
comment8.target=java.lang.Comparable\ findMin()
comment8.text=\n\ Returns\ the\ largest\ object\ in\ the\ class\ implementing\ Tree\n\n\ @return\ the\ largest\ object\ in\ the\ class\ implementing\ Tree\n
comment9.params=
comment9.target=java.lang.String\ inOrderString()
comment9.text=\n\ Returns\ a\ String\ representation\ using\ the\ in-order\ transversal\n\n\ @return\ the\ String\ representation\ of\ the\ in-order\ transversal\ the\ class\ object\ implementing\ Tree\n
numComments=15
