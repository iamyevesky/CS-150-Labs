#BlueJ class context
comment0.target=DirectedGraph
comment0.text=\n\ Creates\ Graph\ objects.\n\n\ @author\ Sena\ Yevenyo\n\ @version\ November\ 16,\ 2019\n
comment1.params=
comment1.target=DirectedGraph()
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ DirectedGraph\n
comment2.params=k
comment2.target=boolean\ addNode(java.lang.Comparable)
comment2.text=\n\ Adds\ a\ value\ to\ the\ graph\ and\ prevents\ duplicates\ of\ the\ same\ value\n\n\ @param\ generic\ class\ K\ object\ k,\ object\ to\ be\ added\n\ @return\ True\ if\ key\ was\ added\n
comment3.params=key
comment3.target=DirectedGraph.DirectedGraphNode\ getNode(java.lang.Comparable)
comment3.text=\n\ Obtains\ the\ node\ of\ a\ key\ in\ the\ grap\n\n\ @param\ generic\ class\ K\ object\ k,\ object's\ node\ to\ be\ obtained\n\ @return\ null\ if\ key\ not\ present\n
comment4.params=k1\ k2\ w
comment4.target=boolean\ addEdge(java.lang.Comparable,\ java.lang.Comparable,\ int)
comment4.text=\n\ Adds\ an\ edge\ from\ one\ object\ in\ the\ graph\ to\ the\ other\n\n\ @param\ K\ k1,k2\ objects\ to\ be\ connected\ \n\ @returns\ True\ if\ edge\ was\ added\ and\ both\ objects\ k1\ and\ k2\ are\ present\ in\ the\ graph\n
comment5.params=k
comment5.target=java.util.ArrayList\ getNeighbours(java.lang.Comparable)
comment5.text=\n\ Returns\ the\ neighbours\ of\ input\ object\ K\ in\ the\ graph\n\n\ @param\ K\ k,\ object\ whose\ neighbours\ are\ to\ be\ found\ in\ the\ graph\ \n\ @returns\ objects\ in\ the\ graph\ which\ can\ be\ reached\ in\ one\ jump\ from\ object\ K\n
comment6.params=k1
comment6.target=void\ dijkstra(java.lang.Comparable)
comment6.text=\n\ Prints\ ot\ all\ nodes\ reachable\ from\ k1\ along\ with\ their\ distances\n\ using\ Djikstra's\ algorithm\n\n\ @param\ K\ k,\ object\ whose\ neighbours\ are\ to\ be\ found\ in\ the\ graph\ \n\ @returns\ objects\ in\ the\ graph\ which\ can\ be\ reached\ in\ one\ jump\ from\ object\ K\n
comment7.params=
comment7.target=java.lang.String\ toString()
numComments=8
