#BlueJ class context
comment0.target=UndirectedWeightedGraph
comment0.text=\n\ Abstract\ class\ UndirectedWeightedGraph\ -\ write\ a\ description\ of\ the\ class\ here\n\n\ @author\ Sena\ Yevenyo\n\ @version\ November\ 18,\ 2019\n
comment1.params=name
comment1.target=int\ addNode(java.lang.String)
comment1.text=\n\ Adds\ a\ new\ node\ to\ a\ graph\n\ @param\ name\ -\ new\ name\ to\ be\ added\ to\ graph\n\ @return\ number\ of\ nodes\ in\ the\ graph\n
comment10.params=
comment10.target=NumberedEdge[]\ getEdgeNumbers()
comment10.text=\n\ Returns\ the\ list\ of\ all\ edges\ in\ a\ graph\ in\ a\ adjacent\ matrix\ form\n\ @return\ NamedEdge\ []\ list\ containing\ all\ edges\ in\ a\ graph\n
comment11.params=
comment11.target=void\ empty()
comment11.text=\n\ Removes\ all\ edges\ and\ nodes\ from\ a\ graph\n
comment12.params=
comment12.target=boolean\ isConnected()
comment12.text=\n\ Returns\ true\ if\ a\ graph\ is\ connected\ using\ a\ depth\ first\ search\n\ @return\ Returns\ true\ if\ a\ graph\ is\ connected\ using\ a\ depth\ first\ search\n
comment2.params=name1\ name2\ weight
comment2.target=boolean\ addEdge(java.lang.String,\ java.lang.String,\ float)
comment2.text=\n\ Adds\ an\ edge\ between\ two\ vertices\ in\ a\ graph\n\ @param\ name1\ -\ from\ Vertex\ of\ new\ edge\n\ @param\ name2\ -\ to\ Vertex\ of\ new\ edge\n\ @param\ weight\ -\ weight\ of\ new\ edge\n\ @return\ true\ if\ both\ vertices\ exist\ and\ no\ such\ edge\ exist\n
comment3.params=node1\ node2\ weight
comment3.target=boolean\ addEdge(int,\ int,\ float)
comment3.text=\n\ Adds\ an\ edge\ between\ two\ nodes\ in\ a\ graph\n\ @param\ node1\ -\ from\ Node\ of\ new\ edge\n\ @param\ node2\ -\ to\ Node\ of\ new\ edge\n\ @param\ weight\ -\ weight\ of\ new\ edge\n\ @return\ true\ if\ both\ nodes\ exist\ and\ no\ such\ edge\ exist\n\ \n
comment4.params=node1\ node2\ weight
comment4.target=boolean\ updateWeight(int,\ int,\ float)
comment4.text=\n\ Updates\ the\ edge\ weight\ between\ two\ nodes\ in\ a\ graph\n\ @param\ node1\ -\ from\ Node\ of\ new\ edge\n\ @param\ node2\ -\ to\ Node\ of\ new\ edge\n\ @param\ weight\ -\ weight\ of\ new\ edge\n\ @return\ true\ if\ both\ vertices\ exist\ and\ such\ edge\ exist\ \n
comment5.params=name1\ name2\ weight
comment5.target=boolean\ updateWeight(java.lang.String,\ java.lang.String,\ float)
comment5.text=\n\ Updates\ the\ edge\ weight\ between\ two\ vertices\ in\ a\ graph\n\ @param\ name1\ -\ from\ Vertex\ of\ new\ edge\n\ @param\ name2\ -\ to\ Vertex\ of\ new\ edge\n\ @param\ weight\ -\ weight\ of\ new\ edge\n\ @return\ true\ if\ both\ nodes\ exist\ and\ such\ edge\ exist\ \n
comment6.params=
comment6.target=java.lang.String[]\ getNodeNames()
comment6.text=\n\ Returns\ the\ list\ of\ String\ vertices\ in\ a\ graph\n\ @return\ String\ []\ list\ containing\ all\ vertices\ in\ graph\ in\ ascending\ order\ of\ how\ they\ were\ added\n
comment7.params=name
comment7.target=java.lang.String[]\ getNeighbourNames(java.lang.String)
comment7.text=\n\ Returns\ the\ list\ of\ String\ vertices\ one\ jump\ from\ a\ specific\ vertex\n\ @param\ name\ -\ String\ vertex\ whose\ neighbors\ are\ to\ be\ found\n\ @return\ String\ []\ list\ containing\ all\ nodes\ in\ graph\ of\ one\ jump\ from\ a\ specific\ vertex\n
comment8.params=node
comment8.target=int[]\ getNeighbourNums(int)
comment8.text=\n\ Returns\ the\ list\ of\ Integer\ nodes\ one\ jump\ from\ a\ specific\ node\n\ @param\ node\ -\ Integer\ node\ whose\ neighbors\ are\ to\ be\ found\n\ @return\ String\ []\ list\ containing\ all\ nodes\ in\ graph\ of\ one\ jump\ from\ a\ specific\ node\n
comment9.params=
comment9.target=NamedEdge[]\ getEdgeNames()
comment9.text=\n\ Returns\ the\ list\ of\ all\ edges\ in\ a\ graph\ in\ a\ 'to\ Vertex\ from\ Vertex'\ form\n\ @return\ NamedEdge\ []\ list\ containing\ all\ edges\ in\ a\ graph\n
numComments=13
