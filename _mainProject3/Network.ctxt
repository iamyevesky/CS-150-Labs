#BlueJ class context
comment0.target=Network
comment0.text=\n\ This\ class\ represents\ the\ road\ network\ in\ a\ town\ or\ city.\n\ All\ node\ locations\ in\ this\ network\ are\ connected\ and\ have\n\ an\ average\ branching\ of\ 5.\n\ Nodes\ are\ not\ connected\ to\ each\ other\ in\ any\ specific\ order.\n\ <p>\n\ All\ edges\ in\ this\ graph\ are\ undirected.\n\ The\ weight\ of\ edges\ between\ nodes\ represent\ the\ time\ in\ minutes\ taken\ to\ traverse\n\ between\ the\ nodes.\ These\ times\ change\ randomly\ to\ represent\ changing\n\ traffic\ conditions\ in\ real\ life\ with\ values\ distributed\ from\ 2\ to\ 15.\n\ <p>\n\ The\ distance\ between\ nodes\ has\ a\ constant\ value\ of\ 1\ unit(mile/km)\n\ @author\ Sena\ Yevenyo\n\ @version\ November\ 27,\ 2019\n
comment1.params=size\ factor\ min\ max
comment1.target=Network(int,\ float,\ int,\ int)
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ Network\n\ Creates\ a\ connected\ network\ with\ a\ specific\ connectivity\ factor\n\ @param\ int\ size\ -\ number\ of\ node\ locations\ in\ the\ road\ network\n\ @param\ int\ branching\ factor\ -\ average\ brancing\ of\ neach\ node\ of\ the\ graph.\ \n\ Lowest\ factor\ possible\ is\ 2.0.\ Highest\ is\ N(N-1)\ where\ N\ is\ number\ of\ nodes\n
comment10.params=
comment10.target=int\ getSize()
comment10.text=\n\ Returns\ the\ size\ of\ the\ graph\n\ \n\ @return\ the\ size\ of\ the\ road\ network\ locations\ \n
comment11.params=index
comment11.target=Node\ getNode(int)
comment12.params=
comment12.target=int\ getEdgeNum()
comment12.text=\n\ Returns\ the\ number\ of\ edges\ in\ a\ graph\n\ \n\ @return\ the\ number\ of\ edges\ in\ a\ graph\ \n
comment13.params=
comment13.target=int\ getTotalBranching()
comment13.text=\n\ Returns\ the\ sum\ of\ the\ branching\ of\ all\ nodes\ in\ the\ graph\n\ \n\ @return\ the\ sum\ of\ the\ branching\ of\ all\ nodes\ in\ the\ graph\n
comment14.params=firstNodeIndex\ secondNodeIndex\ weight
comment14.target=boolean\ updateEdge(int,\ int,\ int)
comment14.text=\n\ Updates\ the\ edge\ weight\ between\ two\ nodes\ in\ the\ graph\n\ \n\ @param\ int\ firstNodeIndex\ -\ index\ of\ one\ node\ of\ the\ edge\n\ @param\ int\ secondNodeIndex\ -\ index\ of\ the\ other\ node\ of\ the\ edge\n\ @param\ int\ weight\ -\ new\ weight\ of\ edge\ \n
comment15.params=
comment15.target=float\ calculateConnectivity()
comment15.text=\n\ Calculates\ the\ connectivity\ factor\ of\ the\ graph\n\ \n\ @returns\ the\ connectivity\ factor\ of\ a\ graph\n
comment16.params=id
comment16.target=Node[]\ getNeighbours(int)
comment16.text=\n\ Returns\ the\ neighbours\ of\ each\ node\ in\ the\ road\ network\n\ \n\ @param\ int\ id\ -\ Unique\ index\ of\ a\ node\ in\ the\ graph\n\ @returns\ an\ Node\ array\ containing\ the\ neighbours\ of\ a\ specific\ node\ in\ a\ network\n
comment17.params=id
comment17.target=float\ getMeanTimeTraversal(int)
comment17.text=\n\ Returns\ mean\ time\ taken\ to\ travel\ between\ non\ adjacent\ cells\ of\ a\ specific\ node\ in\ the\ graph\n\ \n\ @param\ int\ id\ -\ Unique\ index\ of\ a\ node\ in\ the\ graph\n\ @returns\ mean\ time\ taken\ to\ travel\ between\ non\ adjacent\ cells\ of\ a\ specific\ node\ in\ the\ graph\n
comment18.params=
comment18.target=float\ getAvgMeanTimeTraversal()
comment18.text=\n\ Returns\ the\ average\ mean\ time\ taken\ to\ travel\ between\ non\ adjacent\ cells\ in\ the\ graph\n\ \n\ @returns\ the\ average\ mean\ time\ taken\ to\ travel\ between\ non\ adjacent\ cells\ in\ the\ graph\n
comment19.params=first\ second
comment19.target=int\ getTimeTraversal(int,\ int)
comment19.text=\n\ Returns\ the\ time\ taken\ to\ travel\ between\ adjacent\ cells\ in\ the\ graph.\n\ Returns\ Integer.MAX_VALUE\ if\ nodes\ are\ not\ adjacent.\n\ \n\ @param\ int\ first\ -\ index\ of\ one\ node\n\ @param\ int\ second\ -\ index\ the\ other\ node\n\ @returns\ time\ taken\ to\ traverse\ between\ these\ two\ adjacent\ graphs.\n
comment2.params=size
comment2.target=Network(int)
comment2.text=\n\ Constructor\ for\ objects\ of\ class\ Network\n\ Creates\ an\ unconnected\ network\ with\ a\ specific\ size\n\ @param\ int\ size\ -\ number\ of\ node\ locations\ in\ the\ road\ network\n
comment20.params=
comment20.target=java.lang.Integer[]\ rangeDistr()
comment20.text=\n\ Returns\ the\ distribution\ of\ time\ taken\ to\ travel\ between\ adjacent\ cells\ in\ the\ graph.\n\ \n\ @returns\ Integer\ []\ array\ containg\ time\ taken\ to\ traverse\ between\ these\ two\ adjacent\ graphs.\n
comment21.params=
comment21.target=float\ getAvgEdge()
comment21.text=\n\ Returns\ the\ distribution\ of\ time\ taken\ to\ travel\ between\ adjacent\ cells\ in\ the\ graph.\n\ \n\ @returns\ Integer\ []\ array\ containg\ time\ taken\ to\ traverse\ between\ these\ two\ adjacent\ graphs.\n
comment22.params=
comment22.target=float\ getAvgRange()
comment23.params=
comment23.target=void\ updateNetwork()
comment23.text=\n\ Updates\ the\ weights\ of\ edges\ in\ the\ road\ network.\n\ \n
comment24.params=id\ destination
comment24.target=java.util.Deque\ dijkstra(int,\ int)
comment24.text=\n\ Solves\ the\ shortest\ time\ to\ traverse\ to\ all\ nodes\ reachable\ from\ a\ specific\ node\n\ using\ Djikstra's\ algorithm\ and\ then\ returning\ the\ shortest\ path\ from\ source\ node\n\ to\ another\ node\ in\ the\ graph\n\n\ @param\ int\ id\ -\ Source\ node\ index\ for\ the\ Dijkstra's\ algorithm\n\ @param\ int\ destination\ -\ Destination\ node\ index\n\ @returns\ a\ LinkedList\ object\ that\ presents\ the\ path\ to\ take\ from\ source\ node\ to\ destination\ node\n
comment25.params=id\ path
comment25.target=int\ getETA(int,\ java.util.Deque)
comment25.text=\n\ Returns\ the\ estimated\ time\ arrival\ from\ a\ source\ node\ to\ a\ destination\ node\n\ given\ the\ path\ from\ the\ source\ node\ to\ the\ destination\ node\n\ @param\ int\ id\ -\ Source\ node\ index\ for\ the\ Dijkstra's\ algorithm\n\ @param\ Deque<Node>\ path\ -\ Path\ to\ traverse\ from\ source\ node\ to\ destination\ node\n\ @returns\ the\ estimated\ time\ arrival\ from\ a\ source\ node\ to\ a\ destination\ node\n
comment26.params=id\ depth
comment26.target=Node\ getNodeAtBreadth(int,\ int)
comment26.text=\n\ Returns\ the\ ID\ of\ a\ node\ which\ at\ a\ specifiied\ number\ of\ hops\ from\ a\ source\ node\n\ @param\ int\ id\ -\ Source\ node\ ID\n\ @param\ depth\ -\ the\ number\ of\ steps\ from\ the\ source\ node\n\ @returns\ a\ node\ with\ is\ at\ a\ specified\ number\ of\ hops\ from\ the\ source\ node\n
comment27.params=
comment27.target=boolean\ isConnected()
comment27.text=\n\ Returns\ true\ if\ a\ graph\ is\ connected\ using\ a\ depth\ first\ search\n\ @return\ Returns\ true\ if\ a\ graph\ is\ connected\ using\ a\ depth\ first\ search\n
comment28.params=
comment28.target=float\ getAvgBranching()
comment28.text=\n\ Returns\ average\ branching\ of\ the\ nodes\ in\ a\ graph\n\ \n\ @return\ the\ size\ of\ the\ road\ network\ locations\ \n
comment3.params=size\ min\ max
comment3.target=void\ createNetwork(int,\ int,\ int)
comment4.params=first\ second\ weight
comment4.target=boolean\ createEdge(Node,\ Node,\ int)
comment5.params=first\ second\ weight
comment5.target=boolean\ updateEdge(Node,\ Node,\ int)
comment6.params=factor
comment6.target=boolean\ checkPossibility(float)
comment7.params=factor\ min\ max
comment7.target=void\ createFactor(float,\ int,\ int)
comment8.params=
comment8.target=void\ clearTimeDiff()
comment9.params=firstNodeIndex\ secondNodeIndex\ weight
comment9.target=boolean\ createEdge(int,\ int,\ int)
comment9.text=\n\ Creates\ an\ edge\ between\ two\ nodes\ in\ the\ graph\n\ \n\ @param\ int\ firstNodeIndex\ -\ index\ of\ one\ node\ of\ the\ edge\n\ @param\ int\ secondNodeIndex\ -\ index\ of\ the\ other\ node\ of\ the\ edge\n\ @param\ int\ weight\ -\ weight\ of\ edge\ created\n
numComments=29
